apply plugin: 'com.android.library'

android {
    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

	sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] // Disable the automatic ndk-build call by Android Studio.
    }

    // JNI compile
    def JNI_FOLDER = 'src/main/jni'

    // call regular ndk-build(.cmd) script from app directory
    task buildNativeLib(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = android.ndkDirectory
        if (ndkDir) {
            println "UseNDK:" + ndkDir
            commandLine "$ndkDir/ndk-build",
                    '-C', file(JNI_FOLDER).absolutePath,
                    '-j', 1, //Runtime.runtime.availableProcessors(),
                    'all',
                    'NDK_DEBUG=1'
        } else {
            throw new GradleException("you need configure ndk.dir in local.properties")
        }
    }

    //copying files
//    task copyNativeLib(type: Exec, description: 'Copy native file') {
//        commandLine "bash", "-c", "cp src/main/libs/armeabi-v7a/*.so src/main/libs/armeabi-v7a/"
//    }

//    copyNativeLib.dependsOn buildNativeLib

    task cleanNativeLib1(type: Exec, description: 'Clean JNI generated library files') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file(JNI_FOLDER).absolutePath,
                'clean'
    }
    task cleanNativeLib2(type: Exec, description: 'Clean JNI object files') {
        commandLine "rm", "-rf", file("src/main/obj/").absolutePath
    }

    task cleanNativeLib3(type: Exec, description: 'Clean JNI object files') {
        commandLine "rm", "-rf", file("src/main/libs/").absolutePath
    }

    task cleanNativeLib << {
        tasks.cleanNativeLib1.execute()
    }

    task distCleanNativeLib << {
        tasks.cleanNativeLib1.execute()
        tasks.cleanNativeLib2.execute()
        tasks.cleanNativeLib3.execute()
    }

    task distClean() << {}

    clean.dependsOn cleanNativeLib
    distClean.dependsOn distCleanNativeLib

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNativeLib
    }
}

hello { task ->
    println "$task.project.name " +  "-> okay!"
}

dependencies {
    compile project(':exoplayer2-library-core')
//    compile project(':exoplayer2-library-dash')
//    compile project(':exoplayer2-library-hls')
//    compile project(':exoplayer2-library-smoothstreaming')
//    compile project(':exoplayer2-library-ui')

    // Testing-only dependencies
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    // copied from https://github.com/googlesamples/android-testing/tree/master/runner/AndroidJunitRunnerSample
    androidTestCompile 'com.android.support:support-annotations:' + project.ext.supportLibraryVersion;
    androidTestCompile 'com.android.support.test:runner:' + project.ext.runnerVersion;
    androidTestCompile 'com.android.support.test:rules:' + project.ext.rulesVersion;
    androidTestCompile 'com.android.support.test.espresso:espresso-core:' + project.ext.espressoVersion;
}
